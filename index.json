[{"authors":null,"categories":null,"content":"Demidova E. A. RUDN University student majoring in mathematics and computer science. Her interests are in the areas of computer science and advanced mathematics.\n  Download my resumé.\n","date":1683331200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1683331200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Demidova E. A. RUDN University student majoring in mathematics and computer science. Her interests are in the areas of computer science and advanced mathematics.\n  Download my resumé.","tags":null,"title":"Демидова Е. А.","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://eademidova.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, laboratory work 3 and 4 were completed on the following topics:\n Introduction to working with Octave Systems of linear equations.  Lab №3 As a result of the work, I learned how to perform basic calculations and draw the simplest two-dimensional graphs using the Octave system for mathematical calculations.\nThe following tasks were completed:\n Perform simple operations. Perform operations with vectors. Calculate projector. Perform matrix operations. Build simple graphs. Build two graphs on one drawing. Plot $y = x^2sin(x)$. Compare cycles and operations with vectors  Lab №4 As a result of the work, I learned how to solve systems of linear equations using the Octave system for mathematical calculations.\nThe following tasks were completed:\n Solve SLAE using the Gauss Method Solve SLAE by applying left division Find LU decomposition Find LUP decomposition  Conclusions Over the past week, I’ve learned how to do basic calculations and draw basic 2D graphs using the Octave math system. I also learned how to solve systems of linear equations using the Octave math system.\n","date":1683331200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1683331200,"objectID":"8eaad253cba5719f1b8e41d70a7c381c","permalink":"https://eademidova.github.io/post/week2_2.0/","publishdate":"2023-05-06T00:00:00Z","relpermalink":"/post/week2_2.0/","section":"post","summary":"Second week post","tags":["Academic"],"title":"Week 2. NP","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, laboratory work 1 and 2 was completed on the following topics:\n Version control Mark down.  Lab #1 As a result of the laboratory work, the ideology and application of version control tools were studied. And also the skills of working with git were mastered, the skills of creating keys, the repository, adding and deleting files from the repository were acquired.\nThe following tasks were completed:\n– Create a basic configuration for working with git. – Create an SSH key. – Create a PGP key.\n Set up git signatures. Register on Github. – Create a local directory for completing assignments in the subject.  Lab #2 As a result of the laboratory work, I learned how to format a report using the markdown markup language\nThe following tasks were completed:\n Paste screenshots into the image folder Insert the necessary literature into the cite.bib file Write the text of the report Compile report  Conclusions Over the past week, I have mastered the skills of working with Git and Markdown.\n","date":1681776000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1681776000,"objectID":"f571558a1076e4bf68b3c343519171f4","permalink":"https://eademidova.github.io/post/week1_2.0/","publishdate":"2023-04-18T00:00:00Z","relpermalink":"/post/week1_2.0/","section":"post","summary":"First post from last week.","tags":["Academic"],"title":"Week 1. NP","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction The Linux IPC (Inter-process communication) system provides a means for processes to communicate with each other.\nThere are several IPC methods available to programmers:\n half-duplex UNIX channels FIFO (named pipes) SYSV style message queues Multiple SYSV-style semaphores SYSV style shared memory segments Network sockets (Berkeley style) (not covered by this article) Full duplex channels (stream channels) (not covered by this article)  If used effectively, these features provide a solid base for maintaining a client/server ideology on any UNIX system, including Linux.\nBasic concepts Named pipes work in much the same way as regular pipes, but still have a few notable differences.\nNamed pipes exist as a special device file in the file system. Processes of different origins can share data through such a channel. The named pipe remains on the file system for later use after all I/O is done.  Create FIFO There are several ways to create a named pipe. The first two can be done directly from the shell.\n mknod MYFIFO p mkfifo a=rw MYFIFO These two commands perform identical operations, with one exception. The mkfifo command provides the ability to change the permissions of a FIFO file immediately after creation. When using mknod, a call to the chmod command will be required.\nFIFO files can be quickly identified in the physical file system by the “p” indicator, shown here in the long directory listing.\n $ ls -1 MYFIFO ^prw-r--r-- 1 root root 0 Dec 14 22:15 MYFIFO| ... Also note that the vertical separator is placed directly after the filename. Another good reason to run\n Linux, huh? To create a FIFO in C, we can resort to using the mknod() system call:\n LIBRARY FUNCTION: mknod(); PROTOTYPE: int mknod( char *pathname, mode_t mode, dev_t dev ); RETURNS: 0 on success, -1 on error: errno = EFAULT (wrong path specified) EACCESS (no rights) ENAMETOOLONG (way too long) ENOENT (wrong path specified) ENOTDIR (wrong path specified) (see the mknod man page for the rest) NOTES: Creates a file system node (file, device file, or FIFO) We leave the more detailed discussion of the mknod() man page, but for now let’s look at a simple example of creating a FIFO in C:\n mknod(\u0026#34;/tmp/MYFIFO\u0026#34;, S_IFIFO|0666, 0); In this case, the file “/tmp/MYFIFO” is created as a FIFO file. The permissions required are “0666”, although they are influenced by the umask setting, such as:\n final_umask = requested_permissions \u0026amp; ~original_umask ... A general trick is to use the umask() system call to temporarily remove the umask value:\n umask(0); mknod(\u0026#34;/tmp/MYFIFO\u0026#34;, S_IFIFO|0666, 0); Also, the third argument to mknod() is ignored, otherwise we create a device file. In this case, it should note the top and bottom numbers of the device file.\nFIFO operations FIFO I/O operations are essentially the same as for regular channels, with one exception. To physically open a passage to a channel, the “open” system call or library function must be used. With half-duplex pipes, this is not possible because the pipe resides in the kernel and not in the physical file system. In our example, we will treat the channel as a stream, opening it with fopen() and closing it with fclose().\nConsider a simple server process:\n /***************************************************** *************************** Excerpt from \u0026#34;Linux Programmer\u0026#39;s Guide - Chapter 6\u0026#34; (C)opyright 1994-1995, Scott Burkett ******************************************************* ************************** MODULE: fifoserver.c ******************************************************* ************************** #include #include #include #include #include #define FIFO_FILE \u0026#34;MYFIFO\u0026#34; int main(void) { FILE *fp; char readbuf[80]; /* Create FIFO if it doesn\u0026#39;t already exist */ umask(0); mknod(FIFO_FILE, S_IFIFO|0666, 0); while(1) { fp = fopen(FIFO_FILE, \u0026#34;r\u0026#34;); fgets(readbuf, 80, fp); printf(\u0026#34;Received string: %s\\n\u0026#34;, readbuf); fclose(fp); } return(0); } Since FIFO blocks by default, let’s start the server in the background after it has been compiled:\n $fifoserver\u0026amp; We’ll discuss the blocking action shortly, but first let’s look at the following simple client for our server:\n /***************************************************** *************************** Excerpt from \u0026#34;Linux Programmer\u0026#39;s Guide - Chapter 6\u0026#34; (C)opyright 1994-1995, Scott Burkett ******************************************************* ************************** MODULE: fifoclient.c ******************************************************* ************************** #include #include #define FIFO_FILE \u0026#34;MYFIFO\u0026#34;int main(int argc, char *argv[]) { FILE *fp; if ( argc != 2 ) { printf(\u0026#34;USAGE: fifoclient [string]\\n\u0026#34;); exit(1); } fputs(argv[1], fp); fclose(fp); return(0); } Blocking action on FIFO If the FIFO is open for reading, the process blocks until some other process opens the FIFO for writing. Similarly for the reverse situation. If this behavior is not desired, then the O_NONBLOCK flag in the open() system call can be used to cancel the blocking action. …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"b14890ea2c05bc0c445616e2b27c6f01","permalink":"https://eademidova.github.io/post/fifo/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/fifo/","section":"post","summary":"Post on FIFOs - First In First Out","tags":["Academic"],"title":"FIFOs - First In First Out","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction In this article, we will cover the following topics:\n What are markup languages ​​and why are they needed? What is LaTeX? How special is LaTeX?  What is version control? A markup language (text) in computer terminology is a set of characters or sequences of characters inserted into text to convey information about its display or structure. It belongs to the class of computer languages. A text document written using a markup language contains not only the text itself (as a sequence of words and punctuation marks), but also additional information about its various parts - for example, an indication of headings, selections, lists, etc. In more complex cases A markup language allows you to insert interactive elements and content from other documents into a document.\n2. What is LaTeX? What is LATEX? In short, it is a TEX-based publishing system. The computer layout system TEX (pronounced “tech”) was created by the outstanding American mathematician and programmer Donald Knuth in the late 70s of the XX century; publishing systems based on it are still widely used and are not going to give up their positions. Here is a short list of TEX’s advantages:\n None of the currently existing publishing systems can compare with TEX in the printing quality of texts with mathematical formulas. The TEX system has been implemented on all modern computer platforms, and all of these implementations really work in the same way. Thanks to this, TEX has become an international language for the exchange of mathematical and physical articles: having typed his article in TEX, a mathematician can send it by e-mail to his colleague, even if the sender works under Windows, and the recipient works with UNIX or, say , on a Macintosh. There are vast “preprint archives” on the Internet to which anyone can submit (and from which anyone can receive) an article; all these articles are typed again in TEX. Finally, the core TEX implementations for all platforms are free.  As already noted, TEX is a system created by the American mathematician and programmer Donald E. Knuth for typesetting texts with formulas. By itself, TEX is a specialized programming language (Knuth not only invented the language, but also wrote a translator for it, and in such a way that it works exactly the same on a variety of computers), which is written in publishing systems used in practice. More precisely, each TEX-based publishing system is a package of macro definitions (macropackage) of this language. Specifically, LATEX (pronounced “latex” or “latex”, also spelled “LaTeX”) is a TEX-based publishing system created by Leslie Lamport.\nWhat’s special about LaTeX? This tool is used ubiquitously to create scientific papers, write books, and many other forms of publication. It allows not only to create beautifully designed documents, but also allows users to implement complex typesetting elements such as mathematical expressions, tables, references and bibliographies very quickly, getting consistent markup across all sections.\nThanks to the availability of a large number of open libraries (more on that later), the possibilities of LaTeX are almost limitless. These libraries extend the user experience even further, allowing you to add footnotes, draw diagrams, and more.\nOne of the most compelling reasons many people use LaTeX is to separate the content of a document from its style. This means that after writing the content, you can easily change its appearance. Similarly, you can create one document style and use it to standardize the look of others.\nThis allows scientific journals to create templates for submissions. These templates have pre-defined markup, leaving only the content to be added. In fact, there are hundreds of such templates, ranging from various resumes to slide presentations.\nConclusions LaTeX is a convenient and easy to use markup language. With it, you can create standardized articles and books, it simplifies the work with text files due to the ability to create automatic table of contents, bibliography and other sections that may be needed. It has a huge number of advantages, its possibilities are almost limitless thanks to a large number of open libraries.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"48d1feae5c0ec3689da86c8084f7785c","permalink":"https://eademidova.github.io/post/latex/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/latex/","section":"post","summary":"A post about what LaTeX is.","tags":["Academic"],"title":"Markup languages. LaTeX.","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction In this article, we will cover the following topics:\n What information should be in the report? What is Markdown and why is it used for reporting? Technical part of the report design.  What information should be in the report? The report usually consists of the following parts:\n The purpose of the work.  Here is the statement of the purpose of the laboratory work. Wording goals for each laboratory work are given in the methodological instructions.\nFormulation of the task.  Here is a description of the job as recommended methodological manual and issued version.\nTheoretical introduction.  It describes the theoretical aspects related to the performance of the work.\nDoing work.  The actions taken are described, a link to the illustration is given as an illustration.\nConclusions.  The results of the work done are briefly described here.\nWhat is markdown and why is it used for reporting? Markdown is a text markup language created by writer and blogger John Gruber. It is designed to create beautifully designed texts in regular TXT files. You don’t need bulky processors like Word or Pages to create documents with bold or italics, quotes, links, and even tables. It is enough to remember the simple rules of Markdown, and you can even write in Notepad.\nThis markup language is used by bloggers, writers, editors and journalists around the world. And it is used for a reason, but due to the fact that you can use a certain template, which simplifies editing and designing the work. This language is very convenient for creating many reports of the same type, since you can take a suitable template and simply make the necessary changes each time without thinking about font size, indentation, the formation of a list of references, a list of illustrations, because all this is already automatically set.\nTechnical part of the report design. In this part, we will look at the process of preparing a report using Markdown.\nFirst you need to download or create a template that suits you. Then just enter the information in the required fields. In addition to the report, it is necessary to create separate folders for the file with literature sources and pictures. In order to insert an image, you need to register the path to it using the form:\n ![Image title](image/placeimg_800_600_tech.jpg){ #fig:001 width=70% } There are also templates for formatting a file with a list of references, they should also include in the required fields information about the title of the book / electronic source, about the author, year of publication, publisher and the rest necessary for you. By placing links of this type @tannenbaum:modern-os:ru] in the text and compiling, you will have a generated bibliography.\nMarkdown also has other features, such as creating tables, formatting formulas and code. All this can be found by reading the information, for example, on this [website] (https://www.markdownguide.org/)\nConclusions A report is a structured statement of goals, process and results about some work done. It helps a person to better understand your actions and easily navigate the work done. Markdown is a convenient and easy to use lightweight markup language, great for reporting. Reporting is a very useful skill to learn and use.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"e261f3f04883ab6b2cf208f170a97646","permalink":"https://eademidova.github.io/post/rep/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/rep/","section":"post","summary":"Post about how to make a report.","tags":["Academic"],"title":"Report formatting.","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction In this article, we will cover the following topics:\n LaTeX markup language Octave programming language Julia Programming Language  LaTeX markup language LaTeX (pronounced /ˈlɑːtɛx/ or /ˈleɪtɛx/ [1]) is the most popular set of macro extensions (or macro package) for the TeX computer-aided layout system, which facilitates the typesetting of complex documents.\nThis tool is used ubiquitously to create scientific papers, write books, and many other forms of publication. It allows not only to create beautifully designed documents, but also allows users to implement complex typesetting elements such as mathematical expressions, tables, references and bibliographies very quickly, getting consistent markup across all sections.\nThanks to the availability of a large number of open libraries (more on that later), the possibilities of LaTeX are almost limitless. These libraries extend the user experience even further, allowing you to add footnotes, draw diagrams, and more.\nOne of the most compelling reasons many people use LaTeX is to separate the content of a document from its style. This means that after writing the content, you can easily change its appearance. Similarly, you can create one document style and use it to standardize the look of others.\nThis allows scientific journals to create templates for submissions. These templates have pre-defined markup, leaving only the content to be added. In fact, there are hundreds of such templates, ranging from various resumes to slide presentations.\nOctave programming language MGNU Octave is a free system for mathematical calculations[1] using a high-level language compatible with MATLAB.\nOctave provides an interactive command interface for solving linear and non-linear mathematical problems and other numerical experiments. In addition, Octave can be used for batch processing. The Octave language operates with arithmetic of real and complex scalars, vectors and matrices, has extensions for solving linear algebraic problems, finding the roots of systems of nonlinear algebraic equations, working with polynomials, solving various differential equations, integrating systems of differential and differential-algebraic equations of the first order, integrating functions on finite and infinite intervals. This list can be easily expanded using the Octave language (or using dynamically loaded modules created in C, C++, Fortran, etc.).\nResearchers at the University of Maryland in the US compared math calculations using MATLAB, Octave, SciLab, and FreeMat in a simple and complex scenario. In the first case, a system of linear equations was solved, and in the second, a finite-difference discretization of the Poisson equation in two-dimensional space. The main conclusion is that GNU Octave copes with tasks better than other open mathematical packages, demonstrating results (pages 23 and 25) comparable to those of Matlab.\nScientific calculations performed using open source software have an additional “layer of protection”, because if desired, anyone can repeat the same calculations and check the validity of the results. The same calculations performed on expensive software partially cut off the possibility of verifying the results. The problem is actually much broader (English text) and it’s not just open source or proprietary math programs. It is no secret that scientific journals usually do not require authors to provide data and methods sufficient to guarantee the repetition of the results of the experiment, the verification of the model. Especially often economists and financiers sin with this, simply classifying their data. Checking the calculations and conclusions among a sample of an array of articles with “classified” data gave unexpected results (English text). Science, like software, should be open, which is why open math packages are of value to the whole society.\nProgramming language Julia. The Julia language is a dynamically typed, cross-platform, freely distributed (MIT license) compiled free programming language that has a number of advantages and disadvantages. Julia implements the ability to JIT - compilation based on LLVM. Just-in-Time (JIT) compilation provides both the expressiveness of modern interpreted languages ​​and the performance of languages ​​such as C and Fortran. The JIT compiler compiles the first time a program is run, extracting information from the text that is not explicitly specified by the programmer, and using this information to optimize the generated machine code.\nThe advantages of the Julia language include the following:\n Simplicity intuitive language whose syntax resembles the syntax of Python and MATLAB; the speed of calculations of programs written in Julia is comparable to the speed of programs written in C or Fortran; efficient vectorization and parallelization of calculations, a large number of data types, including rational and complex numbers; carrying out calculations in the absence of some data (there is a missing data …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"2f4b4abe5d52bb6215c9c453f699e7ac","permalink":"https://eademidova.github.io/post/science_prog/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/science_prog/","section":"post","summary":"Post about scientific programming languages.","tags":["Academic"],"title":"Scientific programming languages.","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction In this article, we will cover the following topics:\n What is a version control system What is Git How to work with Git  What is the version control system Version control system (also used the definition of “version control system [1]”, from the English. Version Control System, VCS or Revision Control System) - software to facilitate the work with changing information. The version control system allows you to store multiple versions of the same document, revert to earlier versions if necessary, determine who made a change and when, and much more.\nWhat is Git Git is the absolute leader in popularity among modern version control systems. It is a mature project with active support and open source. Git was originally developed in 2005 by Linus Torvalds, creator of the Linux operating system kernel. Git is used for version control by a huge number of software development projects, both commercial and open source. The system is used by many professional software developers. It runs great on a variety of operating systems and can be used with a variety of integrated development environments (IDEs).\nHow to work with Git In order to work with Git, you first need to register on [GitHub] (https://github.com/) - one of the services for using the Git version control system. Then install git, after that you should add the settings that you need. For example, make sure that each of your actions is marked with a name and mail. Then you need to create a remote repository or clone and connect to it. Changes are made to the local computer, and then transferred to the site using the commands git add (add files), git commit (comment on changes), git push (upload files to GitHub). To download changes made by someone else, use the git pull command.\nConclusions Git is a convenient and easy to use version control system. With it, you can track and commit changes to files, which makes it easier to work on a project with many people.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://eademidova.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"A post about what Git is.","tags":["Academic"],"title":"Version control. Git","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, labs 5 and 6 were completed on the following topics:\n Analysis of the Linux file system. Commands for working with files and directories. Search for files. I/O redirection. View running processes.  Lab #5 As a result of the laboratory work, I got acquainted with the Linux file system, its structure, names and contents of directories. I gained practical skills in using commands to work with files and directories, managing processes (and jobs), checking disk usage and maintaining the file system.\nThe following tasks were completed:\n Complete the examples given in the first part of the description of the laboratory work. Learn cp, mkdir, mv, chmod commands and learn how to use them Find out information about commands using the man command  Lab #6 As a result of the laboratory work, I got acquainted with the tools for searching files and filtering text data. Gained practical skills: managing processes (and tasks), checking disk usage and maintaining file systems.\nThe following tasks were completed:\n Use output and input redirection in practice. Learn to start processes in the background and stop them with the kill command. Learn find and prep commands and learn how to use them Learn about df and du commands and use them.  Conclusions Over the past week, I have learned various commands for working with and analyzing the UNIX file system, as well as gaining practical skills in working with it.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"bc6ade111387b12fbb819edd4e87b35f","permalink":"https://eademidova.github.io/post/week1/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week1/","section":"post","summary":"First post from last week.","tags":["Academic"],"title":"Week 1","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, laboratory work 7 and 8 were completed on the following topics:\n Command shell Midnight Commander. Text editor vi.  Lab #7 As a result of the laboratory work, I have my main features of the Midnight Commander command shell. Gained practical skills in viewing directories and files; ma- nipulation with them.\nThe following tasks were completed:\n Learning information about mc. Practical work with mc. Learn mcedit hotkeys. Learn to work with files using mcedit.  Lab #8 As a result of laboratory work, I got acquainted with the Linux operating system. Gained practical skills in working with the vi editor installed by default in almost all distributions.\nThe following tasks were completed:\n Learn the basic functions of the vi text editor Create a file with vi Edit file with vi  Conclusions Over the past week, I’ve been learning and working with the Midnight Commander shell. I also learned how to work with the vi text editor built into almost all linux distributions, which was unusual to use, but interesting. This experience will be very useful for me in my future studies and in general in life. In general, I am satisfied with the results of the past week, I completed all the work in advance and I did not have any particular difficulties.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"e575eb040a9be4ebdd1cb38019334c8c","permalink":"https://eademidova.github.io/post/week-2/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-2/","section":"post","summary":"Second week post.","tags":["Academic"],"title":"Week 2","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, labs 9 and 10 were completed on the following topics:\n Text editor emacs. Programming in the command processor OS UNIX. command files.  Lab #9 As a result of laboratory work, I got acquainted with the Linux operating system. Gained practical experience with the emacs editor.\nTasks were completed on the following topics:\n Open emacs. Create a file lab07.sh. Type text. Save the file using the combination Ctrl-x Ctrl-s (C-x C-s). Do standard editing procedures with the text, each action must but be done with a key combination. Learn to use commands to move the cursor. Buffer management. Window management. Search mode  Lab #10 Studied the basics of programming in the UNIX/Linux OS shell. Learned how to write small batch files.\nThe following tasks were solved:\n Write a script that, when run, will make a backup copy of itself (then there is a file that contains its source code) to another backup directory in your home directory. In this case, the file must be archived by one of the chivators to choose from zip, bzip2 or tar. How to use the archive commands you need to find out by reading the help. Write an example of a batch file that processes any arbitrary number command line arguments, including more than ten. For example, script can sequentially print the values ​​of all passed arguments. Write a batch file - an analogue of the ls command (without using this command itself mandas and dir commands). It is required that it give information about the desired directory and displayed information about the possibilities of accessing the files of this directory. Write a batch file that receives as a command line argument file format (.txt, .doc, .jpg, .pdf, etc.) and calculates the number of such files in the specified directory. The path to the directory is also passed as an argument to mandline.  Conclusions Over the past week, I have learned and worked with the Emacs text editor. I also learned how to write small batch files. The tasks were interesting, I thought about them with pleasure. This experience will be very useful for me in my future studies and in general in life. In general, I am satisfied with the results of the past week, I completed all the work in advance and I did not have any particular difficulties.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"13e4216eb9efdf6a7e6e58c5965bce85","permalink":"https://eademidova.github.io/post/week3/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week3/","section":"post","summary":"Third week post.","tags":["Academic"],"title":"Week 3","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, laboratory work 11 and 12 was completed on the following topics:\n Programming in the command processor OS UNIX. Branches and cycles. Programming in the command processor OS UNIX. Advanced programming.  Lab #11 As a result of the laboratory work, I learned the basics of programming in the UNIX OS shell. I learned how to write more complex batch files using logical control structures and loops..\nTasks were completed on the following topics:\n Using the getopts grep commands, write a batch file that parses command line with switches: – -iinputfile — read data from the specified file; – -ooutputfile — output data to the specified file; – -ppattern — specify a search pattern; – -C — to distinguish between large and small letters; -n Print line numbers. and then searches the specified file for the necessary lines, determined by the -p switch. Write a C program that takes in a number and determines if it is greater than zero, less than zero, or equal to zero. The program is then terminated with exit(n) function, passing the exit code information to the shell. Team- ny file should call this program and, after parsing with the command $?, display a message telling you what number was entered. Write a batch file that creates the specified number of files, numbered sequentially from 1 to 𝑁 (for example, 1.tmp, 2.tmp, 3.tmp, 4.tmp, etc.). Number of files to be created is passed as command line arguments. This same co- The mand file must be able to delete all files created by it (if they exist). Write a batch file that, using the tar command, packs into an archive all files in the specified directory. Modify it so that it packs only files that have been modified less than a week ago (use find command)  Lab #12 Studied the basics of programming in the UNIX OS shell. learned to write more complex batch files using logical control constructs and cycles.\nThe following tasks were solved:\n Write a batch file that implements a simplified semaphore mechanism. Co- mand file must wait for some time t1 to be released resource, issuing a message about it, and after waiting for its release, use it for some time t2\u0026lt;\u0026gt;t1, also giving out information that the resource is used by the corresponding batch file (process). Run batch file in one virtual terminal in the background by redirecting its output to another (\u0026gt; /dev/tty#, where # is the terminal number where the output) in which this file is also running, but not in the background, but in a privileged mode. Refine the program so that there is the possibility of interaction between the three or more processes. Implement the man command using a batch file. Explore the contents of the log /usr/share/man/man1. It contains archives of text files containing help on most of the programs and commands installed in the system. Each archive can be opened with the less command by immediately viewing the contents of the help. Command the file must receive the name of the command as a command line argument and in the form output a help about this command or a message about the lack of help, if the corresponding file is not in the man1 directory. Using the $RANDOM built-in variable, write a batch file that generates generating a random sequence of letters of the Latin alphabet. Note that $RANDOM produces pseudo-random numbers in the range from 0 to 32767  Conclusions Over the past week, I’ve learned the basics of UNIX shell programming. I also learned how to write more complex batch files using logical control structures. and cycles. The tasks were interesting, but difficult, so I solved them for quite a long time and not without someone else’s help. In general, I am satisfied with the results of the past week, I completed all the work in advance and I did not have any particular difficulties.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"4d0eee97f66f24aec1deb366868d3dea","permalink":"https://eademidova.github.io/post/week-4/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-4/","section":"post","summary":"Fourth week post.","tags":["Academic"],"title":"Week 4","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Introduction Over the past week, labs 13 and 14 were completed on the following topics:\n Tools used in software development in OS such as UNIX/Linux Named pipes  Lab #13 As a result of the laboratory work, she acquired the simplest skills in developing, analyzing, testing and debugging applications in the UNIX/Linux operating system using the example of creating a calculator with simple functions in the C programming language.\nThe following tasks were completed:\n Create a subdirectory ~/work/os/lab_prog in your home directory. Create files in it: calculate.h, calculate.c, main.c. It will be the most primitive calculator capable of adding, subtracting, multiplying and divide, raise a number to a power, take the square root, calculate sin, cos, tan. When run, it will ask for the first number, the operation, the second number. Thereafter the program will print the result and stop. Compile the program with gcc. Correct syntax errors if necessary. Create a Makefile. Use gdb to debug the calcul program. Using the splint utility, try to analyze the codes of the calculate.c files and main.c.  Lab #14 As a result of the laboratory work, she gained practical skills in working with named pipes.\nThe following tasks were solved:\nStudy the server.c and client.c programs given in the text. Taking these examples for the sample, write similar programs with the following changes:\n Not 1 client works, but several (for example, two). Clients transmit the current time with some frequency (for example, once every five seconds). Use the sleep() function to pause the client. The server does not work indefinitely, but stops working after a while (for example, measure, 30 sec). Use the clock() function to determine the server’s uptime. What happens if the server terminates without closing the channel?  Conclusions Over the past week, I’ve been learning about named pipes and getting hands-on with them. I also acquired the simplest skills in developing, analyzing, testing and debugging applications in UNIX/Linux operating systems using the example of creating a calculator with simple functions in a programming language. . In general, I am satisfied with the results of the past week, I completed all the work in advance and I did not have any particular difficulties.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"b9c987356c3a66e06352bf0be87ffc88","permalink":"https://eademidova.github.io/post/week-5/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-5/","section":"post","summary":"Post for the fifth week.","tags":["Academic"],"title":"Week 5","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://eademidova.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Что нужно знать для реализации?\n  Указатели\n  Move семантика (Дополнительный этап)\n  rValue и lValue ссылки (Дополнительный этап)\n  Шаблоны\n  Итераторы (Дополнительный этап)\n  Переопределение операторов\n  Класс Vector должен иметь следующие поля рrivate :\n Размерность вектора Массив значений вектора Порядковый номер вектора Класс Vестоr должен иметь следующие поля public : Количество созданных векторов ( static )  Необходимо реализовать следующие функции или методы класса:\n Набор конструкторов класса, включающий конструктор копирования Деструктор • Функция отображения вектора и его номера ( print ) Оператор - функции : сложения / вычитания векторов унарный минус скалярного произведения векторов присваивания  ","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://eademidova.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Проект посвящен созданию упрощённого класса векторов на языке программирования c++.","tags":["Deep Learning"],"title":"Реализация класса векторов на c++","type":"project"},{"authors":["Демидова Е. А.","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://eademidova.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]