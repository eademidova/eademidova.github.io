[{"authors":null,"categories":null,"content":"Демидова Е. А. студентка РУДН по направлению математика и компьютерные науки. Её интересы относятся к областям компьютерных наук и высшей математики\n  Download my resumé.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Демидова Е. А. студентка РУДН по направлению математика и компьютерные науки. Её интересы относятся к областям компьютерных наук и высшей математики\n  Download my resumé.","tags":null,"title":"Демидова Е. А.","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://eademidova.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение Система Linux IPC (Inter-process communication) предоставляет средства для взаимодействия процессов между собой.\nВ распоряжении программистов есть несколько методов IPC:\n полудуплексные каналы UNIX FIFO (именованные каналы) Очереди сообщений в стиле SYSV Множества семафоров в стиле SYSV Разделяемые сегменты памяти в стиле SYSV Сетевые сокеты (в стиле Berkeley) (не охватывается этой статьей) Полнодуплексные каналы (каналы потоков) (не охватывается этой статьей)  Если эти возможности эффективно используются, то они обеспечивают солидную базу для поддержания идеологии клиент/сервер в любой UNIX-системе, включая Linux.\nОсновные понятия Именованные каналы во многом работают так же, как и обычные каналы, но все же имеют несколько заметных отличий.\nИменованные каналы существуют в виде специального файла устройства в файловой системе. Процессы различного происхождения могут разделять данные через такой канал. Именованный канал остается в файловой системе для дальнейшего использования и после того, как весь ввод/вывод сделан.  Создание FIFO Есть несколько способов создания именованного канала. Первые два могут быть осуществлены непосредственно из shell-а.\n mknod MYFIFO p mkfifo a=rw MYFIFO Эти две команды выполняют идентичные операции, за одним исключением. Команда mkfifo предоставляет возможность для изменения прав доступа к файлу FIFO непосредственно после создания. При использовании mknod будет необходим вызов команды chmod.\nФайлы FIFO могут быть быстро идентифицированы в физической файловой системе посредством индикатора “p”, представленного здесь в длинном листинге директории.\n $ ls -1 MYFIFO ^prw-r--r-- 1 root root 0 Dec 14 22:15 MYFIFO| ... Также заметьте, что вертикальный разделитель располагается непосредственно после имени файла. Другая веская причина запустить\n Linux, eh? Чтобы создать FIFO на Си, мы можем прибегнуть к использованию системного вызова mknod():\n LIBRARY FUNCTION: mknod(); PROTOTYPE: int mknod( char *pathname, mode_t mode, dev_t dev ); RETURNS: 0 в случае успеха, -1 в случае ошибки: errno = EFAULT (ошибочно указан путь) EACCESS (нет прав) ENAMETOOLONG (слишком длинный путь) ENOENT (ошибочно указан путь) ENOTDIR (ошибочно указан путь) (остальные смотрите в man page для mknod) NOTES: Создает узел файловой системы (файл, файл устройства или FIFO) Оставим более детальное обсуждение mknod()-а man page, а сейчас давайте рассмотрим простой пример создания FIFO на Си:\n mknod(\u0026#34;/tmp/MYFIFO\u0026#34;, S_IFIFO|0666, 0); В данном случае файл “/tmp/MYFIFO” создан как FIFO-файл. Требуемые права - это “0666”, хотя они находятся под влиянием установки umask, как например:\n final_umask = requested_permissions \u0026amp; ~original_umask ... Общая хитрость - использовать системный вызов umask() для того, чтобы временно устранить значение umask-а:\n umask(0); mknod(\u0026#34;/tmp/MYFIFO\u0026#34;, S_IFIFO|0666, 0); Кроме того, третий аргумент mknod()-а игнорируется, в противном случае мы создаем файл устройства. В этом случае он должен отметить верхнее и нижнее числа файла устройства.\nОперации FIFO Операции ввода/вывода FIFO, по существу, такие же, как для обычных каналов, за одним исключением. Чтобы физически открыть проход к каналу, должен быть использован системный вызов “open” или библиотечная функция. С полудуплексными каналами это невозможно, поскольку канал находится в ядре, а не в физической файловой системе. В нашем примере мы будем трактовать канал как поток, открывая его fopen()-ом и закрывая fclose()-ом.\nРассмотрим простой сервер-процесс:\n /**************************************************************************** Excerpt from \u0026#34;Linux Programmer\u0026#39;s Guide - Chapter 6\u0026#34; (C)opyright 1994-1995, Scott Burkett **************************************************************************** MODULE: fifoserver.c **************************************************************************** #include #include #include #include #include #define FIFO_FILE \u0026#34;MYFIFO\u0026#34; int main(void) { FILE *fp; char readbuf[80]; /* Создаем FIFO, если он еще не существует */ umask(0); mknod(FIFO_FILE, S_IFIFO|0666, 0); while(1) { fp = fopen(FIFO_FILE, \u0026#34;r\u0026#34;); fgets(readbuf, 80, fp); printf(\u0026#34;Received string: %s\\n\u0026#34;, readbuf); fclose(fp); } return(0); } Поскольку FIFO блокирует по умолчанию, запустим сервер фоном после того, как его откомпилировали:\n $ fifoserver\u0026amp; Скоро мы обсудим действие блокирования, но сначала рассмотрим следующего простого клиента для нашего сервера:\n /**************************************************************************** Excerpt from \u0026#34;Linux Programmer\u0026#39;s Guide - Chapter 6\u0026#34; (C)opyright 1994-1995, Scott Burkett **************************************************************************** MODULE: fifoclient.c **************************************************************************** #include #include #define FIFO_FILE \u0026#34;MYFIFO\u0026#34;int main(int argc, char *argv[]) { FILE *fp; if ( argc != 2 ) { printf(\u0026#34;USAGE: fifoclient [string]\\n\u0026#34;); exit(1); } fputs(argv[1], fp); fclose(fp); return(0); } Действие блокирования над FIFO Если FIFO открыт для чтения, …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"b14890ea2c05bc0c445616e2b27c6f01","permalink":"https://eademidova.github.io/ru/post/fifo/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/fifo/","section":"post","summary":"Пост на тему Именованные каналы (FIFOs - First In First Out)","tags":["Academic"],"title":"Именованные каналы (FIFOs - First In First Out)","type":"post"},{"authors":["Демидова Е. А.","吳恩達"],"categories":["Demo","教程"],"content":"Введение За прошедшую неделю были выполнены лабораторые работы 5 и 6 на следующие темы:\n Анализ файловой системы Linux. Команды для работы с файлами и каталогами. Поиск файлов. Перенаправление ввода-вывода. Просмотр запущенных процессов.  Лабораторная работа №5 В результате лабораторной работы я ознакомилась с файловой системой Linux, её структурой, именами и содержанием каталогов.Приобрела практические навыки по применению команд для работы с файлами и каталогами, по управлению процессами (и работами), по проверке использования диска и обслуживанию файловой системы.\nБыли выполнены следующие задачи:\n Выполнить примеры, приведённые в первой части описания лабораторной работы. Изучить команды cp, mkdir, mv, chmod и научиться их применять Узнать информацию о командах с помощью комнанды man  Лабораторная работа №6 В результате выполнения лабораторной работы ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Приобретела практические навыки: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.\nБыли выполнены следующие задачи:\n Использовать на практике перенаправление вывода и ввода. Научиться заупскать процессы в фоновом режиме и останавливать их с помощью команды kill. Изучить команды find и prep и научиться их применять Узнать информацию о командах df и du и использовать их.  Выводы За прошедшую неделю я изучила различные команды для работы и анализа файловой системы UNIX, а также приобрела практические навыки по работе с ней.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"bc6ade111387b12fbb819edd4e87b35f","permalink":"https://eademidova.github.io/ru/post/week1/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/week1/","section":"post","summary":"Первый пост о прошедшей неделе.","tags":["Academic","开源"],"title":"Неделя 1","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение За прошедшую неделю были выполнены лабораторые работы 7 и 8 на следующие темы:\n Командная оболочка Midnight Commander. Текстовой редактор vi.  Лабораторная работа №7 В результате лабораторной работы я своила основные возможности командной оболочки Midnight Commander. Приобрела навыки практической работы по просмотру каталогов и файлов; ма- нипуляций с ними.\nБыли выполнены следующие задачи:\n Изучение информации о mc. Практическая работа с mc. Изучить горячие клавиши mcedit. Научиться работать с файлами с помощью mcedit.  Лабораторная работа №8 В результате выполнения лабораторной работы познакомилась с операционной системой Linux. Получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.\nБыли выполнены следующие задачи:\n Изучить основные функции текстового редактора vi Создать файл с помощью vi Отредактировать файл с помощью vi  Выводы За прошедшую неделю я изучила и поработала с командной обоблочкой Midnight Commander. Также я научилась работать со встроенным в практически все дистрибутивы linux текстовым редактором vi, который был непривычен в использовании, но интересен. Этот опыть будет очень полезным для меня при будущем обучении и в целом в жизни. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"e575eb040a9be4ebdd1cb38019334c8c","permalink":"https://eademidova.github.io/ru/post/week-2/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/week-2/","section":"post","summary":"Пост по второй неделе.","tags":["Academic"],"title":"Неделя 2","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение За прошедшую неделю были выполнены лабораторые работы 9 и 10 на следующие темы:\n Текстовой редактор emacs. Программирование в командном процессоре ОС UNIX. Командные файлы.  Лабораторная работа №9 В результате выполнения лабораторной работы познакомилась с операционной системой Linux. Получила практические навыки работы с редактором emacs.\nБыли выполнены задачи по следующим темам:\n Открыть emacs. Создать файл lab07.sh. Набрать текст. Сохранить файл с помощью комбинации Ctrl-x Ctrl-s (C-x C-s). Проделать с текстом стандартные процедуры редактирования, каждое действие долж- но осуществляться комбинацией клавиш. Научиться использовать команды по перемещению курсора. Управление буферами. Управление окнами. Режим поиска  Лабораторная работа №10 Изучила основы программирования в оболочке ОС UNIX/Linux. Научилась писать небольшие командные файлы.\nБыли решены следующие задачи:\n Написать скрипт, который при запуске будет делать резервную копию самого себя (то есть файла, в котором содержится его исходный код) в другую директорию backup в вашем домашнем каталоге. При этом файл должен архивироваться одним из ар- хиваторов на выбор zip, bzip2 или tar. Способ использования команд архивации необходимо узнать, изучив справку. Написать пример командного файла, обрабатывающего любое произвольное число аргументов командной строки, в том числе превышающее десять. Например, скрипт может последовательно распечатывать значения всех переданных аргументов. Написать командный файл — аналог команды ls (без использования самой этой ко- манды и команды dir). Требуется, чтобы он выдавал информацию о нужном каталоге и выводил информацию о возможностях доступа к файлам этого каталога. Написать командный файл, который получает в качестве аргумента командной строки формат файла (.txt, .doc, .jpg, .pdf и т.д.) и вычисляет количество таких файлов в указанной директории. Путь к директории также передаётся в виде аргумента ко- мандной строки.  Выводы За прошедшую неделю я изучила и поработала с текстовым редактором Emacs. Также я научилась писать небольшие командные файлы. Поставленные задачи были интересными, я с удовольствием размышляла над ними. Этот опыт будет очень полезным для меня при будущем обучении и в целом в жизни. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"13e4216eb9efdf6a7e6e58c5965bce85","permalink":"https://eademidova.github.io/ru/post/week3/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/week3/","section":"post","summary":"Пост по третьей неделе.","tags":["Academic"],"title":"Неделя 3","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение За прошедшую неделю были выполнены лабораторые работы 11 и 12 на следующие темы:\n Программирование в командном процессоре ОС UNIX. Ветвления и циклы. Программирование в командном процессоре ОС UNIX. Расширенное программирование.  Лабораторная работа №11 В результате выполнения лаборатаорной работы я изучила основы программирования в оболочке ОС UNIX. Научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов..\nБыли выполнены задачи по следующим темам:\n Используя команды getopts grep, написать командный файл, который анализирует командную строку с ключами: – -iinputfile — прочитать данные из указанного файла; – -ooutputfile — вывести данные в указанный файл; – -pшаблон — указать шаблон для поиска; – -C — различать большие и малые буквы; – -n — выдавать номера строк. а затем ищет в указанном файле нужные строки, определяемые ключом -p. Написать на языке Си программу, которая вводит число и определяет, является ли оно больше нуля, меньше нуля или равно нулю. Затем программа завершается с помощью функции exit(n), передавая информацию в о коде завершения в оболочку. Команд- ный файл должен вызывать эту программу и, проанализировав с помощью команды $?, выдать сообщение о том, какое число было введено. Написать командный файл, создающий указанное число файлов, пронумерованных последовательно от 1 до 𝑁 (например 1.tmp, 2.tmp, 3.tmp,4.tmp и т.д.). Число файлов, которые необходимо создать, передаётся в аргументы командной строки. Этот же ко- мандный файл должен уметь удалять все созданные им файлы (если они существуют). Написать командный файл, который с помощью команды tar запаковывает в архив все файлы в указанной директории. Модифицировать его так, чтобы запаковывались только те файлы, которые были изменены менее недели тому назад (использовать команду find)  Лабораторная работа №12 Изучила основы программирования в оболочке ОС UNIX. Научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.\nБыли решены следующие задачи:\n Написать командный файл, реализующий упрощённый механизм семафоров. Ко- мандный файл должен в течение некоторого времени t1 дожидаться освобождения ресурса, выдавая об этом сообщение, а дождавшись его освобождения, использовать его в течение некоторого времени t2\u0026lt;\u0026gt;t1, также выдавая информацию о том, что ресурс используется соответствующим командным файлом (процессом). Запустить командный файл в одном виртуальном терминале в фоновом режиме, перенаправив его вывод в другой (\u0026gt; /dev/tty#, где # — номер терминала куда перенаправляется вывод), в котором также запущен этот файл, но не фоновом, а в привилегированном режиме. Доработать программу так, чтобы имелась возможность взаимодействия трёх и более процессов. Реализовать команду man с помощью командного файла. Изучите содержимое ката- лога /usr/share/man/man1. В нем находятся архивы текстовых файлов, содержащих справку по большинству установленных в системе программ и команд. Каждый архив можно открыть командой less сразу же просмотрев содержимое справки. Командный файл должен получать в виде аргумента командной строки название команды и в виде результата выдавать справку об этой команде или сообщение об отсутствии справки, если соответствующего файла нет в каталоге man1. Используя встроенную переменную $RANDOM, напишите командный файл, генерирую- щий случайную последовательность букв латинского алфавита. Учтите, что $RANDOM выдаёт псевдослучайные числа в диапазоне от 0 до 32767  Выводы За прошедшую неделю я изучила основы программирования в оболочке ОС UNIX. Также я научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов. Поставленные задачи были интересными, но сложными, поэтому решала я их досаточно долго и не без чужой помощи. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"4d0eee97f66f24aec1deb366868d3dea","permalink":"https://eademidova.github.io/ru/post/week-4/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/week-4/","section":"post","summary":"Пост по четвертой неделе.","tags":["Academic"],"title":"Неделя 4","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение За прошедшую неделю были выполнены лабораторые работы 13 и 14 на следующие темы:\n Средства, применяемые при разработке программного обеспечения в ОС типа UNIX/Linux Именованные каналы  Лабораторная работа №13 В результате выполнения лабораторной работы приобрела простейшие навыки разработки, анализа, тестирования и отладки приложений в ОС типа UNIX/Linux на примере создания на языке программирования С калькулятора с простейшими функциями.\nБыли выполнены следующие задачи:\n В домашнем каталоге создайте подкаталог ~/work/os/lab_prog. Создайте в нём файлы: calculate.h, calculate.c, main.c. Это будет примитивнейший калькулятор, способный складывать, вычитать, умножать и делить, возводить число в степень, брать квадратный корень, вычислять sin, cos, tan. При запуске он будет запрашивать первое число, операцию, второе число. После этого программа выведет результат и остановится. Выполните компиляцию программы посредством gcc. При необходимости исправьте синтаксические ошибки. Создайте Makefile. С помощью gdb выполните отладку программы calcul. С помощью утилиты splint попробуйте проанализировать коды файлов calculate.c и main.c.  Лабораторная работа №14 В результате выполнения лабораторной работы приобрела практические навыки работы с именованными каналами.\nБыли решены следующие задачи:\nИзучите приведённые в тексте программы server.c и client.c. Взяв данные примеры за образец, напишите аналогичные программы, внеся следующие изменения:\n Работает не 1 клиент, а несколько (например, два). Клиенты передают текущее время с некоторой периодичностью (например, раз в пять секунд). Используйте функцию sleep() для приостановки работы клиента. Сервер работает не бесконечно, а прекращает работу через некоторое время (напри- мер, 30 сек). Используйте функцию clock() для определения времени работы сервера. Что будет в случае, если сервер завершит работу, не закрыв канал?  Выводы За прошедшую неделю я изучила именованные каналы и приобрела практические навыки работы с ними. Также я приобрести простейшие навыки разработки, анализа, тестирования и отладки приложений в ОС типа UNIX/Linux на примере создания на языке программирования калькулятора с простейшими функциями.. Поставленные задачи были интересными, но сложными, поэтому решала я их досаточно долго и не без чужой помощи. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"b9c987356c3a66e06352bf0be87ffc88","permalink":"https://eademidova.github.io/ru/post/week-5/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/week-5/","section":"post","summary":"Пост по пятой неделе.","tags":["Academic"],"title":"Неделя 5","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение В статье мы рассмотрим следующие темы:\n Какая информация должна быть в отчёте? Что такое Markdown и почему его используют для оформления отчёта? Техническая часть оформления отчёта.  Какая информация должна быть в отчёте? Отчёт обычно состоит из следующих частей:\n Цель работы.  Здесь приводится формулировка цели лабораторной работы. Формулировки цели для каждой лабораторной работы приведены в методических указаниях.\nФормулировка задания.  Здесь приводится описание задания в соответствии с рекомендациями методического пособия и выданным вариантом.\nТеоретическое введение.  Здесь описываются теоретические аспекты, связанные с выполнением работы.\nВыполнение работы.  Описываются проведённые действия, в качестве иллюстрации даётся ссылка на иллюстрацию\nВыводы.  Здесь кратко описываются итоги проделанной работы.\nЧто такое markdown и почему его используют для оформления отчёта? Markdown — язык текстовой разметки, созданный писателем и блогером Джоном Грубером. Он предназначен для создания красиво оформленных текстов в обычных файлах формата TXT. Вам не нужны громоздкие процессоры вроде Word или Pages, чтобы создавать документы с жирным или курсивным начертанием, цитатами, ссылками и даже таблицами. Достаточно запомнить простые правила Markdown, и можно писать хоть в «Блокноте».\nЭтот язык разметки используется блогерами, писателями, редакторами и журналистами по всему миру. И используется он не просто так, а в связи с тем, что можно использовать определённый шаблон, что упрощает редактирование и оформление работы. Этот язык очень удобен для создания множества однотипных отчётов, так как можно взять подходящий шаблон и просто каждый раз вносить необходимые изменения, не думая при этом о размере шрифта, отступах, формировании списка литературы, списка иллюстраций, ведь всё это уже автоматически задано.\nТехническая часть оформления отчёта. В этой части рассмотрим процесс подготовки отчёта с помощью Markdown.\nДля начало нужно загрузить или создать подходящий вам шаблон. Затем просто в необходимые поля внести информацию. Кроме отчёта необходимо завести отдельные папки для файла с источниками литературы и с картинками. Для того чтобы вставить картинку нужно прописать к ней путь используя форму:\n ![Название рисунка](image/placeimg_800_600_tech.jpg){ #fig:001 width=70% } Для офрмления файла со списком литературы также существуют шаблоны, в них также в необходимые поля стоит внести информаци о названии книги/электронного истчоника, об авторе, годе издания, издателе и остальную необходимую для вас. Расставив по тексту ссылки такого вида @tannenbaum:modern-os:ru] и скомпилировав, у вас появится сформированный список литературы.\nТакже Markdown имеет и другие возможности, например создание таблиц, оформление формул и кода. Всё это можно узнать, почитав информацию, например, на данном сайте\nВыводы Отчёт - это структурированное изложение целей, процесса и результатов про какой-то проделанной работе. Он помогает человеку лучше понять ваши действия и легко ориентироваться в проделанной работе. Markdown - удобный и простой в использовании легковесный язык разметки, отлично подходящий для оформления отчётов. Создание отчётов очень полезный навык, который стоит освоить и использовать.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"e261f3f04883ab6b2cf208f170a97646","permalink":"https://eademidova.github.io/ru/post/rep/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/rep/","section":"post","summary":"Пост о том, как оформлять отчёт.","tags":["Academic"],"title":"Оформление отчёта.","type":"post"},{"authors":["Демидова Е. А.","吳恩達"],"categories":["Demo","教程"],"content":"Введение В статье мы рассмотрим следующие темы:\n Что такое сестема управления версиями Что такое Git Как работать с Git  Что такое сестема управления версиями Система управления версиями (также используется определение «система контроля версий[1]», от англ. Version Control System, VCS или Revision Control System) — программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.\nЧто такое Git Git — абсолютный лидер по популярности среди современных систем управления версиями. Это развитый проект с активной поддержкой и открытым исходным кодом. Система Git была изначально разработана в 2005 году Линусом Торвальдсом — создателем ядра операционной системы Linux. Git применяется для управления версиями в рамках колоссального количества проектов по разработке ПО, как коммерческих, так и с открытым исходным кодом. Система используется множеством профессиональных разработчиков программного обеспечения. Она превосходно работает под управлением различных операционных систем и может применяться со множеством интегрированных сред разработки (IDE).\nКак работать с Git Для того чтобы работать с Git для начала нужно зарегестрироваться на GitHub — один из сервисов для использования системы контроля версий Git. Затем установить git, после этого стоит добавить настройки, которые вам необходимы. Например, сделать так, чтобы каждое ваше действие было отмеченно именем и почтой. Затем нужно создать удаленный репозиторий или клонировать и подключиться к нему. Изменения вносятся на локальный компьютер, а затем передаются на сайт с помощью команд git add(добавляем файлы), git commit(комментируем изменения), git push(загружаем файлы на GitHub). Чтобы загрузить изменения внесенные кем-то другим используется команда git pull.\nВыводы Git - удобная и простая в использовании система контроля версий. С помощью неё можно отслеживать и фиксировать изменения в файлах, что упрощает работу над проектом с множеством людей.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://eademidova.github.io/ru/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/getting-started/","section":"post","summary":"Пост о том, что такое Git.","tags":["Academic","开源"],"title":"Управление версиями. Git","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение В статье мы рассмотрим следующие темы:\n Язык разметки LaTeX Язык программирования Octave Язык программирования Julia  Язык разметки LaTeX LaTeX (произносится /ˈlɑːtɛx/ или /ˈleɪtɛx/[1]) — наиболее популярный набор макрорасширений (или макропакет) системы компьютерной вёрстки TeX, который облегчает набор сложных документов.\nЭтот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.\nБлагодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.\nОдна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.\nЭто позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов.\nЯзык программирования Octave MGNU Octave — свободная система для математических вычислений[1], использующая совместимый с MATLAB язык высокого уровня.\nOctave представляет интерактивный командный интерфейс для решения линейных и нелинейных математических задач, а также проведения других численных экспериментов. Кроме того, Octave можно использовать для пакетной обработки. Язык Octave оперирует арифметикой вещественных и комплексных скаляров, векторов и матриц, имеет расширения для решения линейных алгебраических задач, нахождения корней систем нелинейных алгебраических уравнений, работы с полиномами, решения различных дифференциальных уравнений, интегрирования систем дифференциальных и дифференциально-алгебраических уравнений первого порядка, интегрирования функций на конечных и бесконечных интервалах. Этот список можно легко расширить, используя язык Octave (или используя динамически загружаемые модули, созданные на языках C, C++, Фортран и др.).\nИсследователи из Университета Мэриленда в США провели сравнительный анализ математических вычислений, используя MATLAB, Octave, SciLab и FreeMat в простом сценарии и в сложном. В первом случае решали систему линейных уравнений а в втором — конечно-разностную дискретизацию уравнения Пуассона в двухмерном пространстве. Основной вывод — GNU Octave справляется с задачами лучше остальных открытых математических пакетов, демонстрируя результат (страницы 23 и 25) сопоставимый с матлабовским.\nНаучные расчеты, выполненные с использованием открытого ПО имеют дополнительный «уровень защиты», ведь при желании любой может повторить прогнать те же самые расчеты и проверить валидность результатов. Те же самые вычисления, выполненные на дорогущем ПО, частично отсекают возможность проверки результатов. Проблема на самом деле гораздо шире (английский текст) и дело не только в открытых или проприетарных математических программах. Не секрет, что научные журналы как правило не требуют от авторов предоставить данные и методику, достаточные для гарантированного повтора результатов эксперимента, проверки модели. Особенно часто этим грешат экономисты и финансисты, попросту засекречивая свои данные. Проверка расчетов и выводов среди выборки из массива статей с «засекреченными» данными дала неожиданные результаты (английский текст). Наука, как и софт, должна быть открытой, вот почему открытые математические пакеты имеют ценность для всего общества.\nЯзык программирования Julia. Язык Julia - это кросс-платформенный компилируемый свободно распространяемый язык программирования (лицензия MIT) с динамической типизацией, который имеет ряд достоинств и недостатков. B Julia pеализована возможность JIT - компиляции на основе LLVM. Компиляция Just-in-Time (JIT) позволяет обеспечить одновременно выразительность современных интерпретируемых языков и производительность таких языков, как С и Fortran. Компилятор JIT выполняет компиляцию во время первого запуска программы, извлекая из текста информацию, не указанную явно программистом, и используя эту информацию для оптимизации создаваемого машинного кода.\nК достоинствам языка Julia можно отнести следующее:\n Простота интуитивно понятный язык, синтаксис которого напоминает синтаксис Python и MATLAB; быстродействие вычислений программ, написанных на Julia, сопоставимо с быстродействием программ, написанных на С или Fortran; эффективная векторизация и распараллеливание …","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"2f4b4abe5d52bb6215c9c453f699e7ac","permalink":"https://eademidova.github.io/ru/post/science_prog/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/science_prog/","section":"post","summary":"Пост о языках научного программирования.","tags":["Academic"],"title":"Языки научного программирования.","type":"post"},{"authors":["Демидова Е. А."],"categories":["Demo"],"content":"Введение В статье мы рассмотрим следующие темы:\n Что такое языки разметки и зачем они нужны? Что такое LaTex? Как особенного в LaTex?  Что такое сестема управления версиями? Язы́к разме́тки (текста) в компьютерной терминологии — набор символов или последовательностей символов, вставляемых в текст для передачи информации о его отображении или строении. Принадлежит классу компьютерных языков. Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст (как последовательность слов и знаков препинания), но и дополнительную информацию о различных его участках — например, указание на заголовки, выделения, списки и т. д. В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.\n2. Что такое LaTex? Что же такое LATEX? Если коротко, то это издательская система на базе TEX’а. Система компьютерной верстки TEX (произносится «тех») была создана выдающимся американским математиком и программистом Дональдом Кнутом в конце 70-х годов XX века; издательские системы на ее базе по сию пору широко используются и сдавать позиции не собираются. Вот краткий перечень TEX’овских достоинств:\n Никакая другая из существующих в настоящее время издательских систем не может сравниться с TEX’ом в полиграфическом качестве текстов с математическими формулами. Система TEX реализована на всех современных компьютерных платформах, и все эти реализации действительно работают одинаково. Благодаря этому TEX стал международным языком для обмена математическими и физическими статьями: набрав свою статью в TEX’е, математик может послать ее по электронной почте своему коллеге, даже если отправитель работает под Windows, а получатель — с UNIX’ом или, допустим, на Макинтоше. В Интернете существуют обширные «архивы препринтов», в которые каждый может послать (и из которых каждый может получить) статью; все эти статьи набраны опять-таки в TEX’е. Наконец, основные реализации TEX’а для всех платформ распространяются бесплатно.  Как уже отмечалось TEX — это созданная американским математиком и программистом Дональдом Кнутом (Donald E. Knuth) система для верстки текстов с формулами. Сам по себе TEX представляет собой специализированный язык программирования (Кнут не только придумал язык, но и написал для него транслятор, причем таким образом, что он работает совершенно одинаково на самых разных компьютерах), на котором пишутся издательские системы, используемые на практике. Точнее говоря, каждая издательская система на базе TEX’а представляет собой пакет макроопределений (макропакет) этого языка. В частности, LATEX (произносится «латех» или «лэйтех», пишется также «LaTeX») — это созданная Лесли Лэмпортом (Leslie Lamport) издательская система на базе TEX’а.\nЧто особенного в LaTex? Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.\nБлагодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.\nОдна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.\nЭто позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов\nВыводы LaTex - удобный и простой в использовании язык разметки. С помощью него можно создавать стандартизированные статьи и книги, он упрощает работу с текстовыми файлами благодаря возможности создания автоматического оглавления, списка литературы и прочих разделов, которые могут быть необходимы. У него огромное количество плюсов, его возможности практически безграничны благодаря большому количеству открытых библиотек.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"48d1feae5c0ec3689da86c8084f7785c","permalink":"https://eademidova.github.io/ru/post/latex/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/latex/","section":"post","summary":"Пост о том, что такое LaTex.","tags":["Academic"],"title":"Языки разметки. LaTeX.","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://eademidova.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Что нужно знать для реализации?\n  Указатели\n  Move семантика (Дополнительный этап)\n  rValue и lValue ссылки (Дополнительный этап)\n  Шаблоны\n  Итераторы (Дополнительный этап)\n  Переопределение операторов\n  Класс Vector должен иметь следующие поля рrivate :\n Размерность вектора Массив значений вектора Порядковый номер вектора Класс Vестоr должен иметь следующие поля public : Количество созданных векторов ( static )  Необходимо реализовать следующие функции или методы класса:\n Набор конструкторов класса, включающий конструктор копирования Деструктор • Функция отображения вектора и его номера ( print ) Оператор - функции : сложения / вычитания векторов унарный минус скалярного произведения векторов присваивания  ","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://eademidova.github.io/ru/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/ru/project/example/","section":"project","summary":"Проект посвящен созданию упрощённого класса векторов на языке программирования c++.","tags":["Deep Learning"],"title":"Реализация класса векторов на c++","type":"project"},{"authors":["Демидова Е. А.","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://eademidova.github.io/ru/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]