<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo | Демидова Е. А.</title>
    <link>https://example.com/ru/category/demo/</link>
      <atom:link href="https://example.com/ru/category/demo/index.xml" rel="self" type="application/rss+xml" />
    <description>Demo</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Demo</title>
      <link>https://example.com/ru/category/demo/</link>
    </image>
    
    <item>
      <title>Неделя 1</title>
      <link>https://example.com/ru/post/week1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/week1/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю были выполнены лабораторые работы 5 и 6 на следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Анализ файловой системы Linux. Команды для работы с файлами и каталогами.&lt;/li&gt;
&lt;li&gt;Поиск файлов. Перенаправление ввода-вывода. Просмотр запущенных процессов.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-5&#34;&gt;Лабораторная работа №5&lt;/h2&gt;
&lt;p&gt;В результате лабораторной работы я ознакомилась с файловой системой Linux, её структурой, именами и содержанием каталогов.Приобрела практические навыки по применению команд для работы с файлами и каталогами, по управлению процессами (и работами), по проверке использования диска и обслуживанию файловой системы.&lt;/p&gt;
&lt;p&gt;Были выполнены следующие задачи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Выполнить примеры, приведённые в первой части описания лабораторной работы.&lt;/li&gt;
&lt;li&gt;Изучить команды cp, mkdir, mv, chmod и научиться их применять&lt;/li&gt;
&lt;li&gt;Узнать информацию о командах с помощью комнанды man&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;лабораторная-работа-6&#34;&gt;Лабораторная работа №6&lt;/h2&gt;
&lt;p&gt;В результате выполнения лабораторной работы ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Приобретела практические навыки: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.&lt;/p&gt;
&lt;p&gt;Были выполнены следующие задачи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Использовать на практике перенаправление вывода и ввода.&lt;/li&gt;
&lt;li&gt;Научиться заупскать процессы в фоновом режиме и останавливать их с помощью команды kill.&lt;/li&gt;
&lt;li&gt;Изучить команды find и prep и научиться их применять&lt;/li&gt;
&lt;li&gt;Узнать информацию о командах df и du и использовать их.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я изучила различные команды для работы и анализа файловой системы UNIX, а также приобрела практические навыки по работе с ней.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Неделя 2</title>
      <link>https://example.com/ru/post/week-2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/week-2/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю были выполнены лабораторые работы 7 и 8 на следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Командная оболочка Midnight Commander.&lt;/li&gt;
&lt;li&gt;Текстовой редактор vi.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-7&#34;&gt;Лабораторная работа №7&lt;/h2&gt;
&lt;p&gt;В результате лабораторной работы я своила основные возможности командной оболочки Midnight Commander. Приобрела навыки практической работы по просмотру каталогов и файлов; ма-
нипуляций с ними.&lt;/p&gt;
&lt;p&gt;Были выполнены следующие задачи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Изучение информации о mc.&lt;/li&gt;
&lt;li&gt;Практическая работа с mc.&lt;/li&gt;
&lt;li&gt;Изучить горячие клавиши mcedit.&lt;/li&gt;
&lt;li&gt;Научиться работать с файлами с помощью mcedit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;лабораторная-работа-8&#34;&gt;Лабораторная работа №8&lt;/h2&gt;
&lt;p&gt;В результате выполнения лабораторной работы познакомилась с операционной системой Linux. Получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.&lt;/p&gt;
&lt;p&gt;Были выполнены следующие задачи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Изучить основные функции текстового редактора vi&lt;/li&gt;
&lt;li&gt;Создать файл с помощью vi&lt;/li&gt;
&lt;li&gt;Отредактировать файл с помощью vi&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я изучила и поработала с командной обоблочкой Midnight Commander. Также я научилась работать со встроенным в практически все дистрибутивы linux текстовым редактором vi, который был непривычен в использовании, но интересен. Этот опыть будет очень полезным для меня при будущем обучении и в целом в жизни. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Неделя 3</title>
      <link>https://example.com/ru/post/week3/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/week3/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю были выполнены лабораторые работы 9 и 10 на следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Текстовой редактор emacs.&lt;/li&gt;
&lt;li&gt;Программирование в командном процессоре ОС UNIX. Командные файлы.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-9&#34;&gt;Лабораторная работа №9&lt;/h2&gt;
&lt;p&gt;В результате выполнения лабораторной работы познакомилась с операционной системой Linux. Получила практические навыки работы с редактором emacs.&lt;/p&gt;
&lt;p&gt;Были выполнены задачи по следующим темам:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Открыть emacs.&lt;/li&gt;
&lt;li&gt;Создать файл lab07.sh.&lt;/li&gt;
&lt;li&gt;Набрать текст.&lt;/li&gt;
&lt;li&gt;Сохранить файл с помощью комбинации Ctrl-x Ctrl-s (C-x C-s).&lt;/li&gt;
&lt;li&gt;Проделать с текстом стандартные процедуры редактирования, каждое действие долж-
но осуществляться комбинацией клавиш.&lt;/li&gt;
&lt;li&gt;Научиться использовать команды по перемещению курсора.&lt;/li&gt;
&lt;li&gt;Управление буферами.&lt;/li&gt;
&lt;li&gt;Управление окнами.&lt;/li&gt;
&lt;li&gt;Режим поиска&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-10&#34;&gt;Лабораторная работа №10&lt;/h2&gt;
&lt;p&gt;Изучила основы программирования в оболочке ОС UNIX/Linux. Научилась писать небольшие командные файлы.&lt;/p&gt;
&lt;p&gt;Были решены следующие задачи:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Написать скрипт, который при запуске будет делать резервную копию самого себя (то
есть файла, в котором содержится его исходный код) в другую директорию backup
в вашем домашнем каталоге. При этом файл должен архивироваться одним из ар-
хиваторов на выбор zip, bzip2 или tar. Способ использования команд архивации
необходимо узнать, изучив справку.&lt;/li&gt;
&lt;li&gt;Написать пример командного файла, обрабатывающего любое произвольное число
аргументов командной строки, в том числе превышающее десять. Например, скрипт
может последовательно распечатывать значения всех переданных аргументов.&lt;/li&gt;
&lt;li&gt;Написать командный файл — аналог команды ls (без использования самой этой ко-
манды и команды dir). Требуется, чтобы он выдавал информацию о нужном каталоге
и выводил информацию о возможностях доступа к файлам этого каталога.&lt;/li&gt;
&lt;li&gt;Написать командный файл, который получает в качестве аргумента командной строки
формат файла (.txt, .doc, .jpg, .pdf и т.д.) и вычисляет количество таких файлов
в указанной директории. Путь к директории также передаётся в виде аргумента ко-
мандной строки.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я изучила и поработала с текстовым редактором Emacs. Также я научилась писать небольшие командные файлы. Поставленные задачи были интересными, я с удовольствием размышляла над ними. Этот опыт будет очень полезным для меня при будущем обучении и в целом в жизни. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Неделя 4</title>
      <link>https://example.com/ru/post/week-4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/week-4/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю были выполнены лабораторые работы 11 и 12 на следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Программирование в командном процессоре ОС UNIX. Ветвления и циклы.&lt;/li&gt;
&lt;li&gt;Программирование в командном процессоре ОС UNIX. Расширенное программирование.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-11&#34;&gt;Лабораторная работа №11&lt;/h2&gt;
&lt;p&gt;В результате выполнения лаборатаорной работы я изучила основы программирования в оболочке ОС UNIX. Научилась писать более сложные командные файлы с использованием логических управляющих конструкций и циклов..&lt;/p&gt;
&lt;p&gt;Были выполнены задачи по следующим темам:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Используя команды getopts grep, написать командный файл, который анализирует
командную строку с ключами:
– -iinputfile — прочитать данные из указанного файла;
– -ooutputfile — вывести данные в указанный файл;
– -pшаблон — указать шаблон для поиска;
– -C — различать большие и малые буквы;
– -n — выдавать номера строк.
а затем ищет в указанном файле нужные строки, определяемые ключом -p.&lt;/li&gt;
&lt;li&gt;Написать на языке Си программу, которая вводит число и определяет, является ли оно
больше нуля, меньше нуля или равно нулю. Затем программа завершается с помощью
функции exit(n), передавая информацию в о коде завершения в оболочку. Команд-
ный файл должен вызывать эту программу и, проанализировав с помощью команды
$?, выдать сообщение о том, какое число было введено.&lt;/li&gt;
&lt;li&gt;Написать командный файл, создающий указанное число файлов, пронумерованных
последовательно от 1 до 𝑁 (например 1.tmp, 2.tmp, 3.tmp,4.tmp и т.д.). Число файлов,
которые необходимо создать, передаётся в аргументы командной строки. Этот же ко-
мандный файл должен уметь удалять все созданные им файлы (если они существуют).&lt;/li&gt;
&lt;li&gt;Написать командный файл, который с помощью команды tar запаковывает в архив
все файлы в указанной директории. Модифицировать его так, чтобы запаковывались
только те файлы, которые были изменены менее недели тому назад (использовать
команду find)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-12&#34;&gt;Лабораторная работа №12&lt;/h2&gt;
&lt;p&gt;Изучила основы программирования в оболочке ОС UNIX. Научилась писать более
сложные командные файлы с использованием логических управляющих конструкций
и циклов.&lt;/p&gt;
&lt;p&gt;Были решены следующие задачи:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Написать командный файл, реализующий упрощённый механизм семафоров. Ко-
мандный файл должен в течение некоторого времени t1 дожидаться освобождения
ресурса, выдавая об этом сообщение, а дождавшись его освобождения, использовать
его в течение некоторого времени t2&amp;lt;&amp;gt;t1, также выдавая информацию о том, что
ресурс используется соответствующим командным файлом (процессом). Запустить
командный файл в одном виртуальном терминале в фоновом режиме, перенаправив
его вывод в другой (&amp;gt; /dev/tty#, где # — номер терминала куда перенаправляется
вывод), в котором также запущен этот файл, но не фоновом, а в привилегированном
режиме. Доработать программу так, чтобы имелась возможность взаимодействия трёх
и более процессов.&lt;/li&gt;
&lt;li&gt;Реализовать команду man с помощью командного файла. Изучите содержимое ката-
лога /usr/share/man/man1. В нем находятся архивы текстовых файлов, содержащих
справку по большинству установленных в системе программ и команд. Каждый архив
можно открыть командой less сразу же просмотрев содержимое справки. Командный
файл должен получать в виде аргумента командной строки название команды и в виде
результата выдавать справку об этой команде или сообщение об отсутствии справки,
если соответствующего файла нет в каталоге man1.&lt;/li&gt;
&lt;li&gt;Используя встроенную переменную $RANDOM, напишите командный файл, генерирую-
щий случайную последовательность букв латинского алфавита. Учтите, что $RANDOM
выдаёт псевдослучайные числа в диапазоне от 0 до 32767&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я изучила основы программирования в оболочке ОС UNIX. Также я научилась писать более сложные командные файлы с использованием логических управляющих конструкций
и циклов. Поставленные задачи были интересными, но сложными, поэтому решала я их досаточно долго и не без чужой помощи. В целом я довольна результатами прошедшей недели, я выполнила все работы заранее и у меня не возникло никаких особенных трудностей.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Оформление отчёта.</title>
      <link>https://example.com/ru/post/rep/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/rep/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;В статье мы рассмотрим следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Какая информация должна быть в отчёте?&lt;/li&gt;
&lt;li&gt;Что такое Markdown и почему его используют для оформления отчёта?&lt;/li&gt;
&lt;li&gt;Техническая часть оформления отчёта.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;какая-информация-должна-быть-в-отчёте&#34;&gt;Какая информация должна быть в отчёте?&lt;/h2&gt;
&lt;p&gt;Отчёт обычно состоит из следующих частей:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Цель работы.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Здесь приводится формулировка цели лабораторной работы. Формулировки
цели для каждой лабораторной работы приведены в методических
указаниях.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Формулировка задания.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Здесь приводится описание задания в соответствии с рекомендациями
методического пособия и выданным вариантом.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Теоретическое введение.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Здесь описываются теоретические аспекты, связанные с выполнением работы.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Выполнение работы.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Описываются проведённые действия, в качестве иллюстрации даётся ссылка на иллюстрацию&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Выводы.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Здесь кратко описываются итоги проделанной работы.&lt;/p&gt;
&lt;h3 id=&#34;что-такое-markdown-и-почему-его-используют-для-оформления-отчёта&#34;&gt;Что такое markdown и почему его используют для оформления отчёта?&lt;/h3&gt;
&lt;p&gt;Markdown — язык текстовой разметки, созданный писателем и блогером Джоном Грубером. Он предназначен для создания красиво оформленных текстов в обычных файлах формата TXT. Вам не нужны громоздкие процессоры вроде Word или Pages, чтобы создавать документы с жирным или курсивным начертанием, цитатами, ссылками и даже таблицами. Достаточно запомнить простые правила Markdown, и можно писать хоть в «Блокноте».&lt;/p&gt;
&lt;p&gt;Этот язык разметки используется блогерами, писателями, редакторами и журналистами по всему миру. И используется он не просто так, а в связи с тем, что можно использовать определённый шаблон, что упрощает редактирование и оформление работы. Этот язык очень удобен для создания множества однотипных отчётов, так как можно взять подходящий шаблон и просто каждый раз вносить необходимые изменения, не думая при этом о размере шрифта, отступах, формировании списка литературы, списка иллюстраций, ведь всё это уже автоматически задано.&lt;/p&gt;
&lt;h2 id=&#34;техническая-часть-оформления-отчёта&#34;&gt;Техническая часть оформления отчёта.&lt;/h2&gt;
&lt;p&gt;В этой части рассмотрим процесс подготовки отчёта с помощью Markdown.&lt;/p&gt;
&lt;p&gt;Для начало нужно загрузить или создать подходящий вам шаблон. Затем просто в необходимые поля внести информацию. Кроме отчёта необходимо завести отдельные папки для файла с источниками литературы и с картинками. Для того чтобы вставить картинку нужно прописать к ней путь используя форму:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; ![Название рисунка](image/placeimg_800_600_tech.jpg){ #fig:001 width=70% }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Для офрмления файла со списком литературы также существуют шаблоны, в них также в необходимые поля стоит внести информаци о названии книги/электронного истчоника, об авторе, годе издания, издателе и остальную необходимую для вас. Расставив по тексту ссылки такого вида &lt;code&gt;@tannenbaum:modern-os:ru]&lt;/code&gt; и скомпилировав, у вас появится сформированный список литературы.&lt;/p&gt;
&lt;p&gt;Также Markdown имеет и другие возможности, например создание таблиц, оформление формул и кода. Всё это можно узнать, почитав информацию, например, на данном &lt;a href=&#34;https://www.markdownguide.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;сайте&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Отчёт - это структурированное изложение целей, процесса и результатов про какой-то проделанной работе. Он помогает человеку лучше понять ваши действия и легко ориентироваться в проделанной работе. Markdown - удобный и простой в использовании легковесный язык разметки, отлично подходящий для оформления отчётов. Создание отчётов очень полезный навык, который стоит освоить и использовать.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git</title>
      <link>https://example.com/ru/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;В статье мы рассмотрим следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Что такое сестема управления версиями&lt;/li&gt;
&lt;li&gt;Что такое Git&lt;/li&gt;
&lt;li&gt;Как работать с Git&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;что-такое-сестема-управления-версиями&#34;&gt;Что такое сестема управления версиями&lt;/h2&gt;
&lt;p&gt;Система управления версиями (также используется определение «система контроля версий[1]», от англ. Version Control System, VCS или Revision Control System) — программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.&lt;/p&gt;
&lt;h3 id=&#34;что-такое-git&#34;&gt;Что такое Git&lt;/h3&gt;
&lt;p&gt;Git — абсолютный лидер по популярности среди современных систем управления версиями. Это развитый проект с активной поддержкой и открытым исходным кодом. Система Git была изначально разработана в 2005 году Линусом Торвальдсом — создателем ядра операционной системы Linux. Git применяется для управления версиями в рамках колоссального количества проектов по разработке ПО, как коммерческих, так и с открытым исходным кодом. Система используется множеством профессиональных разработчиков программного обеспечения. Она превосходно работает под управлением различных операционных систем и может применяться со множеством интегрированных сред разработки (IDE).&lt;/p&gt;
&lt;h2 id=&#34;как-работать-с-git&#34;&gt;Как работать с Git&lt;/h2&gt;
&lt;p&gt;Для того чтобы работать с Git для начала нужно зарегестрироваться на &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; — один из сервисов для использования системы контроля версий Git. Затем установить git, после этого стоит добавить настройки, которые вам необходимы. Например, сделать так, чтобы каждое ваше действие было отмеченно именем и почтой. Затем нужно создать удаленный репозиторий или клонировать и подключиться к нему. Изменения вносятся на локальный компьютер, а затем передаются на сайт с помощью команд git add(добавляем файлы), git commit(комментируем изменения), git push(загружаем файлы на GitHub). Чтобы загрузить изменения внесенные кем-то другим используется команда git pull.&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Git - удобная и простая в использовании система контроля версий. С помощью неё можно отслеживать и фиксировать изменения в файлах, что упрощает работу над проектом с множеством людей.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования.</title>
      <link>https://example.com/ru/post/science_prog/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/science_prog/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;В статье мы рассмотрим следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Язык разметки LaTeX&lt;/li&gt;
&lt;li&gt;Язык программирования Octave&lt;/li&gt;
&lt;li&gt;Язык программирования Julia&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;язык-разметки-latex&#34;&gt;Язык разметки LaTeX&lt;/h2&gt;
&lt;p&gt;LaTeX (произносится /ˈlɑːtɛx/ или /ˈleɪtɛx/[1]) — наиболее популярный набор макрорасширений (или макропакет) системы компьютерной вёрстки TeX, который облегчает набор сложных документов.&lt;/p&gt;
&lt;p&gt;Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.&lt;/p&gt;
&lt;p&gt;Благодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.&lt;/p&gt;
&lt;p&gt;Одна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.&lt;/p&gt;
&lt;p&gt;Это позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов.&lt;/p&gt;
&lt;h2 id=&#34;язык-программирования-octave&#34;&gt;Язык программирования Octave&lt;/h2&gt;
&lt;p&gt;MGNU Octave — свободная система для математических вычислений[1], использующая совместимый с MATLAB язык высокого уровня.&lt;/p&gt;
&lt;p&gt;Octave представляет интерактивный командный интерфейс для решения линейных и нелинейных математических задач, а также проведения других численных экспериментов. Кроме того, Octave можно использовать для пакетной обработки. Язык Octave оперирует арифметикой вещественных и комплексных скаляров, векторов и матриц, имеет расширения для решения линейных алгебраических задач, нахождения корней систем нелинейных алгебраических уравнений, работы с полиномами, решения различных дифференциальных уравнений, интегрирования систем дифференциальных и дифференциально-алгебраических уравнений первого порядка, интегрирования функций на конечных и бесконечных интервалах. Этот список можно легко расширить, используя язык Octave (или используя динамически загружаемые модули, созданные на языках C, C++, Фортран и др.).&lt;/p&gt;
&lt;p&gt;Исследователи из Университета Мэриленда в США провели сравнительный анализ математических вычислений, используя MATLAB, Octave, SciLab и FreeMat в простом сценарии и в сложном. В первом случае решали систему линейных уравнений а в втором — конечно-разностную дискретизацию уравнения Пуассона в двухмерном пространстве. Основной вывод — GNU Octave справляется с задачами лучше остальных открытых математических пакетов, демонстрируя результат (страницы 23 и 25) сопоставимый с матлабовским.&lt;/p&gt;
&lt;p&gt;Научные расчеты, выполненные с использованием открытого ПО имеют дополнительный «уровень защиты», ведь при желании любой может повторить прогнать те же самые расчеты и проверить валидность результатов. Те же самые вычисления, выполненные на дорогущем ПО, частично отсекают возможность проверки результатов. Проблема на самом деле гораздо шире (английский текст) и дело не только в открытых или проприетарных математических программах. Не секрет, что научные журналы как правило не требуют от авторов предоставить данные и методику, достаточные для гарантированного повтора результатов эксперимента, проверки модели. Особенно часто этим грешат экономисты и финансисты, попросту засекречивая свои данные. Проверка расчетов и выводов среди выборки из массива статей с «засекреченными» данными дала неожиданные результаты (английский текст). Наука, как и софт, должна быть открытой, вот почему открытые математические пакеты имеют ценность для всего общества.&lt;/p&gt;
&lt;h2 id=&#34;язык-программирования-julia&#34;&gt;Язык программирования Julia.&lt;/h2&gt;
&lt;p&gt;Язык Julia - это кросс-платформенный компилируемый свободно распространяемый язык программирования (лицензия MIT) с динамической типизацией, который имеет ряд достоинств и недостатков.
B Julia pеализована возможность JIT - компиляции на основе LLVM. Компиляция Just-in-Time (JIT) позволяет обеспечить одновременно выразительность современных интерпретируемых языков и производительность таких языков, как С и Fortran. Компилятор JIT выполняет компиляцию во время первого запуска программы, извлекая из текста информацию, не указанную явно программистом, и используя эту информацию для оптимизации создаваемого машинного кода.&lt;/p&gt;
&lt;p&gt;К достоинствам языка Julia можно отнести следующее:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Простота интуитивно понятный язык, синтаксис которого напоминает синтаксис Python и MATLAB;&lt;/li&gt;
&lt;li&gt;быстродействие вычислений программ, написанных на Julia, сопоставимо с быстродействием программ, написанных на С или Fortran;&lt;/li&gt;
&lt;li&gt;эффективная векторизация и распараллеливание вычислений, большое число типов данных, включая рациональный и комплексные числа;&lt;/li&gt;
&lt;li&gt;проведение расчетов при отсутствии некоторых данных (есть тип дан ных missing);&lt;/li&gt;
&lt;li&gt;задание точности вычислений (тип данных BigFloat, функция setprecision);&lt;/li&gt;
&lt;li&gt;реализация символьных вычислений с помощью макро команд;&lt;/li&gt;
&lt;li&gt;использование библиотек, написанных на С и Fortran, и обмен библиотеками с Python и R;&lt;/li&gt;
&lt;li&gt;интеграция с СУБД (PostgreSQL, MySQL, JSON).;&lt;/li&gt;
&lt;li&gt;поддержка символов Unicode;&lt;/li&gt;
&lt;li&gt;использование парадигмы множественной диспетчеризации - вызов функции слабо зависит от типа параметров функции (параметрический полиморфизм);&lt;/li&gt;
&lt;li&gt;наличие хорошей встроенной математической библиотеки с функциями линейной алгебры.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Julia - это полноценный язык программирования, в котором есть целочисленная арифметика, операции с плавающей точкой, циклы, работа с С-подобными структурами и даже аналог оператора goto. Вместе с тем в языке существует очень удобная возможность векторизации расчетов, которая характерна для языков высокого уровня.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Если говорить о недостатках языка Julia, то следует отметить , что время компиляции больших программ может быть довольно заметным (минуты);&lt;/li&gt;
&lt;li&gt;язык относительно новый , поэтому число библиотек на этом языке относительно невелико ( по сравнению с Python );&lt;/li&gt;
&lt;li&gt;невозможно создать отдельно испролняемую программу - программы на языке Julia работают только в среде Julia.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;В научном программировании используется много языков программирования и математических систем, но перечисленные в данной статье, на мой взгляд, наиболее удобные и эффективные.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки разметки. LaTeX.</title>
      <link>https://example.com/ru/post/latex/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/latex/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;В статье мы рассмотрим следующие темы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Что такое языки разметки и зачем они нужны?&lt;/li&gt;
&lt;li&gt;Что такое LaTex?&lt;/li&gt;
&lt;li&gt;Как особенного в LaTex?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;что-такое-сестема-управления-версиями&#34;&gt;Что такое сестема управления версиями?&lt;/h2&gt;
&lt;p&gt;Язы́к разме́тки (текста) в компьютерной терминологии — набор символов или последовательностей символов, вставляемых в текст для передачи информации о его отображении или строении. Принадлежит классу компьютерных языков. Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст (как последовательность слов и знаков препинания), но и дополнительную информацию о различных его участках — например, указание на заголовки, выделения, списки и т. д. В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.&lt;/p&gt;
&lt;h3 id=&#34;2-что-такое-latex&#34;&gt;2. Что такое LaTex?&lt;/h3&gt;
&lt;p&gt;Что же такое LATEX? Если коротко, то это издательская система на базе TEX’а. Система компьютерной верстки TEX (произносится «тех») была создана выдающимся американским математиком и программистом Дональдом Кнутом в конце 70-х годов XX века; издательские системы на ее базе по сию пору широко используются и сдавать позиции не собираются.
Вот краткий перечень TEX’овских достоинств:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Никакая другая из существующих в настоящее время издательских систем не может сравниться с TEX’ом в полиграфическом качестве текстов с математическими формулами.&lt;/li&gt;
&lt;li&gt;Система TEX реализована на всех современных компьютерных платформах, и все эти реализации действительно работают одинаково.&lt;/li&gt;
&lt;li&gt;Благодаря этому TEX стал международным языком для обмена математическими и физическими статьями: набрав свою статью в TEX’е, математик может послать ее по электронной почте своему коллеге, даже если отправитель работает под Windows, а получатель — с UNIX’ом или, допустим, на Макинтоше.&lt;/li&gt;
&lt;li&gt;В Интернете существуют обширные «архивы препринтов», в которые каждый может послать (и из которых каждый может получить) статью; все эти статьи набраны опять-таки в TEX’е.&lt;/li&gt;
&lt;li&gt;Наконец, основные реализации TEX’а для всех платформ распространяются бесплатно.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Как уже отмечалось TEX — это созданная американским математиком и программистом Дональдом Кнутом (Donald E. Knuth) система для верстки текстов с формулами. Сам по себе TEX представляет собой специализированный язык программирования (Кнут не только придумал язык, но и написал для него транслятор, причем таким образом, что он работает совершенно одинаково на самых разных компьютерах), на котором пишутся издательские системы, используемые на практике. Точнее говоря, каждая издательская система на базе TEX’а представляет собой пакет макроопределений (макропакет) этого языка. В частности, LATEX (произносится «латех» или «лэйтех», пишется также «LaTeX») — это созданная Лесли Лэмпортом (Leslie Lamport) издательская система на базе TEX’а.&lt;/p&gt;
&lt;h2 id=&#34;что-особенного-в-latex&#34;&gt;Что особенного в LaTex?&lt;/h2&gt;
&lt;p&gt;Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.&lt;/p&gt;
&lt;p&gt;Благодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.&lt;/p&gt;
&lt;p&gt;Одна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.&lt;/p&gt;
&lt;p&gt;Это позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;LaTex - удобный и простой в использовании язык разметки. С помощью него можно создавать стандартизированные статьи и книги, он упрощает работу с текстовыми файлами благодаря возможности создания автоматического оглавления, списка литературы и прочих разделов, которые могут быть необходимы. У него огромное количество плюсов, его возможности практически безграничны благодаря большому количеству открытых библиотек.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
